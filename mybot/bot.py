import os
import asyncio
import platform
import random
import shutil
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.types import (
    FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, 
    ReplyKeyboardMarkup, KeyboardButton
)
import yt_dlp

# üîπ –¢–æ–∫–µ–Ω –±–æ—Ç–∞
import os
TOKEN = os.getenv("TOKEN")

# üîπ –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–∑—ã–∫–∏
DOWNLOAD_FOLDER = "downloads"
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

# üîπ –ü—É—Ç—å –∫ FFmpeg
FFMPEG_PATH = r"C:\Users\urfan\Desktop\ffmpeg-7.1.1-essentials_build\bin"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt_dlp
ydl_opts = {
    'format': 'bestaudio/best',
    'outtmpl': f'{DOWNLOAD_FOLDER}/%(title)s.%(ext)s',
    'ffmpeg_location': FFMPEG_PATH,
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
    'quiet': True,
}

# üîπ –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_playlists = {}
user_languages = {}  # user_id: "ru" –∏–ª–∏ "en"
user_search_results = {}  # user_id: list of search results

# üîπ –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è callback
download_map = {}
add_map = {}
id_counter = 0

# üîπ GIF-–∞–Ω–∏–º–∞—Ü–∏–∏
DANCE_GIFS = [
    "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExam82bDZndzk4b2FjeDlkdnhwdjVpbThmYzQ0ZnI0OGFoa2gybHF4cyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/LLHkw7UnvY3Kw/giphy.gif",
    "https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExbWRnOGs0YnVmNzh5OWEzM2pleTY4Mjl5MnBmOHZxbjA3eTFnZXkyayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/tHIRLHtNwxpjIFqPdV/giphy.gif",
    "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExejVmYmlwMTZ0aDV3dzN5N2JmMW54ZWJ6YmhuOG9oOTBqNzJtbjFhcCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/DhstvI3zZ598Nb1rFf/giphy.gif",
    "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExbDdrZXRna2IwYzJqaTh1ZWJ1OGZyZjRsODlsa2ZoOXQ0aWJjN3ZvZSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/KPgOYtIRnFOOk/giphy.gif",
    "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExam82bDZndzk4b2FjeDlkdnhwdjVpbThmYzQ0ZnI0OGFoa2gybHF4cyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/LLHkw7UnvY3Kw/giphy.gif",
    "https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExZTY1eHcxOWg4ZTRyN3U0MjU2NGZwZWJzcGE2eHh3M2ZlNHN4ZXE4NCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/VNxwybK7VrJmzz4ZEI/giphy.gif",
    "https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExYThsbnpnem9qOHhhdm53dHN3NHlnZXk3MDJ2eWdxZXl1dWQ1YXNwZSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/nDSlfqf0gn5g4/giphy.gif",
    "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2lwNHRqNWx4bTc1a3lwNWRyaGN1bW1xNmp6bXRiZHFxYnF4cm1lcCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/DqhwoR9RHm3EA/giphy.gif",
    "https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExMzNzcnhrdjR2bm9tbnRvaXQ2d2hjY3R3aHlvaHM3aDY1anFuZzY4NiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/ZYoFTHxrWNFbW/giphy.gif",
    "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExY2RuYTZsanU2NWl2OW95dWdnbmpvYTBxZWxjOHp4cHh0MjRieHAyeiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/THlB4bsoSA0Cc/giphy.gif",
    "https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExYzJ2cXdubzFtbWEzcDB2ZHM1eXQzNm16eWs0NHZvN3VrOG5vaHFhYiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3ohhwfAa9rbXaZe86c/giphy.gif",
    "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExbWI4OHp4bG90dThrZ3k1dG10OHYxNXlnNTU3NWFlYzJzNWZydzlhbyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l41m3YpztVBtugahW/giphy.gif",
    "https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExYnFtMWk0dG5hb2h3aTUxMHd2YTl6cjZhY29nYXFvZ2ZzNHQ1dHZsbiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/10AmJ6TIlbYxAk/giphy.gif",
    "https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExOGF3MzRhZjQxamdoOWp5M2s4N2l0aWRxMHZpODNibHZyMTJnZXBhdSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/8FM1f72L6sqB26NIsB/giphy.gif",
    "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExdTJsOHNwNGlqanowN2V3eXRqYWViaTlnaGljdHVsaHF2NXVqNWU0eiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/YbXtbKoi2ZUOc/giphy.gif",
    "https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExd3d2ZXloa2QybDBjcHY5dDV0dnIxNWlpenR4a2JucHAzMmxyNW5wbCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3oAt1NiCiTCZrlZvy0/giphy.gif",
    "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExcjVrODZtamp3bmphaGhzZ3BmMXlpOG9kMGF5NDlqOXpkYnc2dnhkNiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/WXB88TeARFVvi/giphy.gif",
    "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExZWhsNnAyOGk0dnNsNTRtOTZ0dzE3cWM5bmU3aWNjaWRhbTZ2bjBpayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Y4WDXbagwPoepikUdJ/giphy.gif",
    "https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExOHQ2amo2ZWVsbTh6aDh1NzJiNHhrb2h0OHFkcmU2a2d5Z2UwMDl6ZyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/RguvAFpdvkVzO/giphy.gif",
]

# üîπ –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ 2 —è–∑—ã–∫–∞—Ö
MESSAGES = {
    "start": {
        "ru": "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è:",
        "en": "Hello! Choose the language for the bot:"
    },
    "menu": {
        "ru": "üéµ –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "en": "üéµ Send a song name or choose an action:"
    },
    "playlist_empty": {
        "ru": "–¢–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç.",
        "en": "Your playlist is empty."
    },
    "playlist_cleared": {
        "ru": "–ü–ª–µ–π–ª–∏—Å—Ç –æ—á–∏—â–µ–Ω.",
        "en": "Playlist cleared."
    },
    "searching": {
        "ru": "üîé –ò—â—É: {} ...",
        "en": "üîé Searching for: {} ..."
    },
    "choose_song": {
        "ru": "–í—ã–±–µ—Ä–∏ –ø–µ—Å–Ω—é:",
        "en": "Choose a song:"
    },
    "downloaded": {
        "ru": "–í–æ—Ç —Ç–≤–æ—è –ø–µ—Å–Ω—è:",
        "en": "Here is your song:"
    },
    "added": {
        "ru": "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–µ–π–ª–∏—Å—Ç!",
        "en": "Added to playlist!"
    },
    "exists": {
        "ru": "–£–∂–µ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ!",
        "en": "Already in playlist!"
    },
}


# üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(lang="ru"):
    if lang == "ru":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üéµ –ü–ª–µ–π–ª–∏—Å—Ç"), KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç")],
                [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
            ], resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üéµ Playlist"), KeyboardButton(text="üóë Clear playlist")],
                [KeyboardButton(text="‚ÑπÔ∏è Help")]
            ], resize_keyboard=True
        )


# üîπ –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def language_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
         InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")]
    ])


# üîπ –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Å–Ω–∏
def make_song_buttons(mp3_path: str, title: str):
    global id_counter
    id_counter += 1
    download_id = f"d{id_counter}"
    id_counter += 1
    add_id = f"a{id_counter}"
    download_map[download_id] = mp3_path
    add_map[add_id] = title

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨á –°–∫–∞—á–∞—Ç—å", callback_data=download_id),
            InlineKeyboardButton(text="‚ûï –í –ø–ª–µ–π–ª–∏—Å—Ç", callback_data=add_id),
            InlineKeyboardButton(text="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=title)
        ]
    ])
    return kb


# üîπ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(MESSAGES["start"]["ru"], reply_markup=language_keyboard())


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query(F.data.startswith("lang_"))
async def set_language(callback_query: types.CallbackQuery):
    lang = callback_query.data.split("_")[1]
    user_languages[callback_query.from_user.id] = lang
    await callback_query.message.answer(
        MESSAGES["menu"][lang],
        reply_markup=main_menu(lang)
    )


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–∏—Å–∫ –ø–µ—Å–µ–Ω)
@dp.message(F.text)
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    lang = user_languages.get(user_id, "ru")
    text = message.text.lower()

    # –ü–ª–µ–π–ª–∏—Å—Ç
    if text in ["üéµ –ø–ª–µ–π–ª–∏—Å—Ç", "üéµ playlist"]:
        pl = user_playlists.get(user_id, [])
        if not pl:
            await message.answer(MESSAGES["playlist_empty"][lang])
        else:
            await message.answer("\n".join(f"{i+1}. {p}" for i, p in enumerate(pl)))
        return

    # –û—á–∏—Å—Ç–∫–∞
    if text in ["üóë –æ—á–∏—Å—Ç–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", "üóë clear playlist"]:
        user_playlists[user_id] = []
        await message.answer(MESSAGES["playlist_cleared"][lang])
        return

    # –ü–æ–º–æ—â—å
    if text in ["‚ÑπÔ∏è –ø–æ–º–æ—â—å", "‚ÑπÔ∏è help"]:
        await message.answer(MESSAGES["menu"][lang])
        return

    # –ü–æ–∏—Å–∫ –ø–µ—Å–µ–Ω
    await message.answer(MESSAGES["searching"][lang].format(message.text))

    loop = asyncio.get_event_loop()

    def run_yt_dlp():
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(f"ytsearch5:{message.text}", download=False)
            return info['entries']

    try:
        results = await loop.run_in_executor(None, run_yt_dlp)
        if not results:
            await message.answer("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_search_results[user_id] = results

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–µ—Å–Ω—è–º–∏
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{i+1}. {r['title']} - {r.get('uploader','')}", callback_data=f"song_{i}")]
                for i, r in enumerate(results)
            ]
        )
        await message.answer(MESSAGES["choose_song"][lang], reply_markup=kb)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")


# üîπ –í—ã–±–æ—Ä –ø–µ—Å–Ω–∏
@dp.callback_query(F.data.startswith("song_"))
async def choose_song(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    lang = user_languages.get(user_id, "ru")

    results = user_search_results.get(user_id, [])
    idx = int(callback_query.data.split("_")[1])
    if idx >= len(results):
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞")
        return

    song = results[idx]

    # –°–∫–∞—á–∏–≤–∞–µ–º –ø–µ—Å–Ω—é
    loop = asyncio.get_event_loop()

    def download_song():
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(song['webpage_url'], download=True)
            filename = ydl.prepare_filename(info)
            mp3_file = filename.rsplit('.', 1)[0] + '.mp3'
            return mp3_file, info

    try:
        mp3_path, info = await loop.run_in_executor(None, download_song)
        audio = FSInputFile(mp3_path)
        title = info.get('title', 'Song')

        kb = make_song_buttons(mp3_path, title)
        await callback_query.message.answer_audio(
            audio=audio, caption=MESSAGES["downloaded"][lang], reply_markup=kb
        )
        await callback_query.message.answer_animation(random.choice(DANCE_GIFS))

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
        user_playlists.setdefault(user_id, [])

    except Exception as e:
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")

    finally:
        # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏
        try:
            shutil.rmtree(DOWNLOAD_FOLDER)
            os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)
        except:
            pass


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–ª–µ–π–ª–∏—Å—Ç
@dp.callback_query()
async def callback_buttons(callback_query: types.CallbackQuery):
    data = callback_query.data
    user_id = callback_query.from_user.id
    lang = user_languages.get(user_id, "ru")

    if data in add_map:
        title = add_map[data]
        pl = user_playlists.setdefault(user_id, [])
        if title not in pl:
            pl.append(title)
            await callback_query.answer(MESSAGES["added"][lang])
        else:
            await callback_query.answer(MESSAGES["exists"][lang])
        return

    if data in download_map:
        path = download_map[data]
        if os.path.exists(path):
            audio = FSInputFile(path)
            await callback_query.message.answer_audio(audio=audio)
            await callback_query.answer()
        else:
            await callback_query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return


if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
